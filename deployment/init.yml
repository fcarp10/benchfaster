- name: Set toolkit directory
  ansible.builtin.set_fact:
    toolkit_dir: "{{ playbook_dir }}/deployment"
    tests_dir: "{{ playbook_dir }}/benchmark"

- name: Set group for workers
  add_host:
    name: "{{ node_item }}"
    groups: workers
  delegate_to: "{{ node_item }}"
  loop: "{{ groups['machines'] }}"
  loop_control:
    loop_var: node_item
  when:
    - "'hypervisors' not in groups"
    - "hostvars[node_item].headnode is not defined"
    - "hostvars[node_item].inventory_hostname not in groups['testers']"

- name: Set group for headnode
  add_host:
    name: "{{ node_item }}"
    groups: headnodes
  delegate_to: "{{ node_item }}"
  loop: "{{ groups['machines'] }}"
  loop_control:
    loop_var: node_item
  when:
    - "'hypervisors' not in groups"
    - "hostvars[node_item].headnode is defined"
    - "hostvars[node_item].inventory_hostname not in groups['testers']"

# TODO: respect interface setting for this command
- name: Determine headnode IP
  shell:
    cmd: bash -c "ip addr sh eth0 | grep 'inet ' | awk '{print substr(\$2, 1, length(\$2)-3)}'"
  delegate_to: "{{ groups['headnodes'][0] }}"
  register: headnodeip
  when:
    - "'hypervisors' not in groups"
    - "hostvars[groups['headnodes'][0]].headnode is defined"

- name: Deploy VMs
  ansible.builtin.include_tasks: "{{ toolkit_dir }}/hvm.yml"
  args:
    apply:
      delegate_to: "{{ current_hv }}"
      delegate_facts: true
  loop: "{{ groups['hypervisors'] }}"
  loop_control:
    loop_var: current_hv
  when: "'hypervisors' in groups"

- name: Register headnode (VM)
  ansible.builtin.set_fact:
    headnode: "{{ hostvars[groups.vms[i]] }}"
  loop: "{{ groups['vms'] }}"
  loop_control:
    index_var: i
    loop_var: headnode_item
  when:
    - "'hypervisors' in groups"
    - "hostvars[headnode_item].headnode is defined"

- name: Generate nebula certificates
  ansible.builtin.include_tasks: "{{ toolkit_dir }}/nebula/nebula_certs.yml"
  delegate_to: localhost

- name: Copy nebula certificates to workers
  copy:
    src: "{{ toolkit_dir }}/nebula"
    dest: /tmp/benchfaster/
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Copy nebula certificates to headnode
  copy:
    src: "{{ toolkit_dir }}/nebula"
    dest: /tmp/benchfaster/
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: current_host

- name: Copy payload folder to headnode
  copy:
    src: "{{ toolkit_dir }}/payload"
    dest: /tmp/benchfaster/
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: current_host

#TODO: check this for redundancy
- name: Create results directory
  ansible.builtin.file:
    path: "/tmp/benchfaster/_results/{{ foldername }}"
    state: directory
  register: results_path

- name: Delete QoS from all nodes
  ansible.builtin.include_tasks: "{{ toolkit_dir }}/netem/qos_delete.yml"
  when: hvm is not defined

#TODO: check which of these files are actually necessary to be copied
- name: Install Nebula on headnode
  ansible.builtin.script: "{{ toolkit_dir }}/nebula/nebula_install.sh {{ nebula.nebula_version }} /tmp {{ hostvars[groups['headnodes'][0]].arch }} lighthouse 127.0.0.99"
  delegate_to: "{{ groups['headnodes'][0] }}"

- name: Install Nebula on workers
  ansible.builtin.script: "{{ toolkit_dir }}/nebula/nebula_install.sh {{ nebula.nebula_version }} /tmp {{ hostvars[current_host].arch }} {{ hostvars[current_host].inventory_hostname }} {{ headnodeip.stdout }}"
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Deploy k3s cluster
  ansible.builtin.include_tasks: "{{ toolkit_dir }}/k3s/k3s_cluster.yml"
  when: hvm is not defined

- name: Apply QoS to all nodes
  ansible.builtin.include_tasks: "{{ toolkit_dir }}/netem/qos.yml"
  when: hvm is not defined
