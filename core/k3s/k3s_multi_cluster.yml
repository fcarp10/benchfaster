- name: Delete old k3s server config directory
  file:
    path: /tmp/k3s
    state: absent
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: current_host

- name: Delete old k3s agent config directory
  file:
    path: /tmp/k3s
    state: absent
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Delete old k3s config directory
  file:
    path: /tmp/k3s
    state: absent
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['testers'] }}"
  loop_control:
    loop_var: current_host

- name: Create k3s server config directory
  file:
    path: /tmp/k3s
    state: directory
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: current_host

- name: Create k3s agent config directory
  file:
    path: /tmp/k3s
    state: directory
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Create k3s server config file
  file:
    path: /tmp/k3s/config.yaml
    state: touch
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: current_host

- name: Create k3s agent config file
  file:
    path: /tmp/k3s/config.yaml
    state: touch
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Configure k3s server advertise address
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'advertise-address:'
    line: "advertise-address: 192.168.50.{{ 98 + hostvars[headnode_item].cluster }}"
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Configure k3s client flannel interface
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'flannel-iface:'
    line: 'flannel-iface: nebula'
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Configure k3s server flannel interface
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'flannel-iface:'
    line: 'flannel-iface: nebula'
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Configure k3s server admission plugins
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'kube-apiserver-arg:'
    line: 'kube-apiserver-arg: enable-admission-plugins=PodNodeSelector'
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Uninstall k3s on headnode
  ansible.builtin.shell: |
    /usr/local/bin/k3s-uninstall.sh > /dev/null
    /usr/local/bin/k3s-agent-uninstall.sh > /dev/null
  ignore_errors: true
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Install k3s on headnode
  ansible.builtin.shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="{{ k3s.k3s_version }}" K3S_NODE_NAME="headnode-c{{ hostvars[headnode_item].cluster }}" INSTALL_K3S_EXEC="--cluster-cidr 10.{{ 2 * hostvars[headnode_item].cluster + 42 }}.0.0/16 --service-cidr 10.{{ 2 * hostvars[headnode_item].cluster + 43 }}.0.0/16" sh -
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item
#For Canal installation, --flannel-backend=none --disable-network-policy is needed
# Debug status: kubectl describe endpointslice on cluster2 should probably list the host names of
# the pods, as described here: https://submariner.io/getting-started/quickstart/external/ and here: https://submariner.io/operations/troubleshooting/#check-endpointslice-resources

#- name: Install Calico on headnode
#  ansible.builtin.shell: |
#    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
#    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml
#  delegate_to: "{{ headnode_item }}"
#  loop: "{{ groups['headnodes'] }}"
#  loop_control:
#    loop_var: headnode_item

#- name: Check for all Calico pods to become ready
#  ansible.builtin.shell: kubectl get pods -n calico-system
#  become: yes
#  register: result
#  until: result.stdout.find("0/") == -1
#  retries: 60
#  delay: 5
#  delegate_to: "{{ headnode_item }}"
#  loop: "{{ groups['headnodes'] }}"
#  loop_control:
#    loop_var: headnode_item

#- name: Install Canal on headnode
#  ansible.builtin.shell: |
#    curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/canal.yaml -O
#    cat canal.yaml | sed 's@10.244.0.0/16@10.{{ 2 * hostvars[headnode_item].cluster + 42 }}.0.0/16@g' > /tmp/benchfaster/canal.yaml
#    kubectl apply -f /tmp/benchfaster/canal.yaml
#    kubectl taint nodes --all node-role.kubernetes.io/control-plane-
#  delegate_to: "{{ headnode_item }}"
#  loop: "{{ groups['headnodes'] }}"
#  loop_control:
#    loop_var: headnode_item

#- name: Call registration of token variables
#  include_tasks: "{{ toolkit_dir }}/k3s/k3s_register_token.yml"
#  delegate_to: "{{ headnode_item }}"
#  loop: "{{ groups['headnodes'] }}"
#  loop_control:
#    loop_var: headnode_item

- name: Read k3s token from headnode
  shell:
    cmd: cat /var/lib/rancher/k3s/server/node-token
  become: yes
  register: tokens
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Assigning tokens
  set_fact:
    "k3s_token_c{{ hostvars[headnode_item].cluster }}": "{{ tokens.results[i].stdout }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    index_var: i
    loop_var: headnode_item

- name: Print tokens
  ansible.builtin.debug:
    msg: "{{ vars['k3s_token_c' ~ hostvars[headnode_item].cluster] }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    index_var: i
    loop_var: headnode_item

- name: Configure k3s agent setting token
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'token:'
    line: "token: {{ vars['k3s_token_c' ~ hostvars[current_host].cluster] }}"
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Configure k3s agent setting hostname
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'node-name:'
    line: "node-name: {{ hostvars[current_host].inventory_hostname }}"
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Configure k3s agent setting port
  ansible.builtin.lineinfile:
    path: /tmp/k3s/config.yaml
    regexp: 'server:'
    line: "server: https://192.168.50.{{ 98 + hostvars[current_host].cluster }}:{{ k3s.k3s_port }}"
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Uninstall k3s on workers
  ansible.builtin.shell: |
    /usr/local/bin/k3s-uninstall.sh > /dev/null
    /usr/local/bin/k3s-agent-uninstall.sh > /dev/null
  ignore_errors: true
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Install k3s on workers
  ansible.builtin.shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="{{ k3s.k3s_version }}" K3S_NODE_NAME="{{ hostvars[current_host].inventory_hostname }}" K3S_URL="https://192.168.50.{{ 98 + hostvars[current_host].cluster }}:{{ k3s.k3s_port }}" K3S_TOKEN="{{ vars['k3s_token_c' ~ hostvars[current_host].cluster] }}" sh -
  delegate_to: "{{ current_host }}"
  loop: "{{ groups['workers'] }}"
  loop_control:
    loop_var: current_host

- name: Check for all available nodes in cluster {{ hostvars[headnode_item].cluster }}
  ansible.builtin.shell: kubectl get nodes
  become: yes
  register: result
  until: result.stdout.find("NotReady") == -1
  retries: 60
  delay: 5
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Label workers as such
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    for worker in $(sudo -E kubectl get nodes | grep -v control-plane | grep -v NAME | sed 's/\s.*$//')
    do
      sudo -E kubectl label node $worker node-role.kubernetes.io/worker=worker
    done
  delegate_to: "{{ headnode_item }}"
  loop: "{{ groups['headnodes'] }}"
  loop_control:
    loop_var: headnode_item

- name: Print tokens
  ansible.builtin.debug:
    var: result
